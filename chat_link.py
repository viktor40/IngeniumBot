from filetail import FileTail  # import the script to tail files like in linux
from server_data import console_in
from server_data import console_out
from server_data import death_messages


def server_link_smp(line):
    a = 'tellraw @a [{\"text\":\"[SMP] \", \"color\":\"yellow\"}, {\"text\":'
    b = '\"{}\", \"color\":\"white\"'.format(line[33:-1]) + '}]\n'

    with open(console_in.format('creative'), 'w') as f:
        f.writelines(a + b)
        f.close()

    with open(console_in.format('flatworld'), 'w') as g:
        g.writelines(a + b)
        g.close()


# SMP
# chat link blocking code
def chat_link_SMP():
    tail = FileTail(console_out.format('survival'))  # tail the console.out file
    for line in tail:
        if '[Server thread/INFO]' in line:  # check if the new line was of the correct type
            if line[33] == '<' and '>' in line:  # check if the the message was sent by a player i.e. <player>
                server_link_smp(line)
                return line
            elif line[33] == '*':  # to also send messages generated by \me
                server_link_smp(line)
                return line
            elif 'joined the game' in line:  # sent player join messages
                server_link_smp(line)
                return line
            elif 'left the game' in line:  # sent player leave messages
                server_link_smp(line)
                return line

            # if the message wasn't yet recognised as a valid message it could still be a death message
            # to check for death messages we check if a death message is in the line by looping over
            # the list with death messages and checking if they are in the line
            # ignore some annoying console messages when villagers die
            for i in death_messages:
                if i in line and 'Villager class' not in line:
                    server_link_smp(line)
                    return line
    return


def server_link_cmp(line):
    a = 'tellraw @a [{\"text\":\"[CMP] \", \"color\":\"yellow\"}, {\"text\":'
    b = '\"{}\", \"color\":\"white\"'.format(line[33:-1]) + '}]\n'

    with open(console_in.format('survival'), 'w') as f:
        f.writelines(a + b)
        f.close()

    with open(console_in.format('flatworld'), 'w') as g:
        g.writelines(a + b)
        g.close()


# CMP
# chat link blocking code
def chat_link_CMP():
    tail = FileTail(console_out.format('creative'))  # tail the console.out file
    for line in tail:
        if '[Server thread/INFO]' in line:  # check if the new line was of the correct type
            if line[33] == '<' and '>' in line:  # check if the the message was sent by a player i.e. <player>
                server_link_cmp(line)
                return line
            elif line[33] == '*':  # to also send messages generated by \me
                server_link_cmp(line)
                return line
            elif 'joined the game' in line:  # sent player join messages
                server_link_cmp(line)
                return line
            elif 'left the game' in line:  # sent player leave messages
                server_link_cmp(line)
                return line

            # if the message wasn't yet recognised as a valid message it could still be a death message
            # to check for death messages we check if a death message is in the line by looping over
            # the list with death messages and checking if they are in the line
            # ignore some annoying console messages when villagers die
            for i in death_messages:
                if i in line and 'Villager class' not in line:
                    server_link_smp(line)
                    return line
    return


def server_link_fmp(line):
    a = 'tellraw @a [{\"text\":\"[FMP] \", \"color\":\"yellow\"}, {\"text\":'
    b = '\"{}\", \"color\":\"white\"'.format(line[33:-1]) + '}]\n'

    with open(console_in.format('survival'), 'w') as f:
        f.writelines(a + b)
        f.close()

    with open(console_in.format('creative'), 'w') as g:
        g.writelines(a + b)
        g.close()


# FMP
# chat link blocking code
def chat_link_FMP():
    tail = FileTail(console_out.format('flatworld'))  # tail the console.out file
    for line in tail:
        if '[Server thread/INFO]' in line:  # check if the new line was of the correct type
            if line[33] == '<' and '>' in line:  # check if the the message was sent by a player i.e. <player>
                server_link_fmp(line)
                return line
            elif line[33] == '*':  # to also send messages generated by \me
                server_link_fmp(line)
                return line
            elif 'joined the game' in line:  # sent player join messages
                server_link_fmp(line)
                return line
            elif 'left the game' in line:  # sent player leave messages
                server_link_fmp(line)
                return line

            # if the message wasn't yet recognised as a valid message it could still be a death message
            # to check for death messages we check if a death message is in the line by looping over
            # the list with death messages and checking if they are in the line
            # ignore some annoying console messages when villagers die
            for i in death_messages:
                if i in line and 'Villager class' not in line:
                    server_link_fmp(line)
                    return line
    return
